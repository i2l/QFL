#+OPTIONS: toc:nil num:nil
#+TITLE: Quantum Foobar Language

** What is it?

*QFL* stands for "Quantum Foobar Language". It is just another useless esoteric
dweller of the Turing tarpit. It features

 * functional purity
 * literate programming
 * full unicode support
 * minimalism (there are only two operations)
 * weird IO model (different from monads and uniq types)
   
** Syntax

It is more simple to describe the syntax of QFL in natural language rather than
in BNF. There are three keywors: "fu", "bar" and "~" which can be sequenced in
any order. Everything else is considered comment.

A major feature of QFL is lack of explicit comment syntax, as compiler just
ignores everything but "fu", "~" and "bar". It makes literate programming very
easy and convenient. (Tip: one can substitute 'u' and 'a' by similar Cyrillic
symbols)

** Compilation

Compilation is done in one pass. Keyword "fu" pushes the =fu= combinator to the
top of a stack. Keyword "bar" pushes the =bar= to the stack.  Keyword "~" pops
two entities, say, =a= (the topmost one) and =b= from the stack, then pushes
=(ba)= back the stack.

An attempt to pop something from an empty stack results in compilation error.

Once EOF is reached, the topmost element of the stack is considered resulting
program.

** Control flow
=fu= is a control flow operator equal to =λ f.(f S) K=

** IO
*** Output
=bar= is an output combinator. Its first argument should be a Church numeral
representing some unicode symbol. The second one should be a value of type
RealWorld (we call it Ψ). In other words, the following program will print a
unicode letter with code n in a universe ψ and return universe ψ':

#+begin_code shell
bar n ψ~~ 
#+end_code

QFL doesn't have monads, uniq types nor any other means protecting values of
type Ψ from being referenced multiple times. But it is not a problem, since QFL
code is run in a multiverse rather than a universe.

One should perform a measurement (in a quantum sense) to observe the output of a
QFL program. All measurements, of course, destroy (or reduce) the quantum
multiword state to a classical single-world one. Consider the following example:

/TODO: Cat example/

*** Input
"But there is no input..." Wrong. QFL *has* input, but it is rather unusual.

/TODO: Describe input/

** Runtime error handling
There are no runtime errors. A QFL VM just tries to reduce everything it
can. When it encounters a term it cannot reduce, it just leaves it be.
